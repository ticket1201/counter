{"version":3,"sources":["Count/Scoreboard/Scoreboard.module.css","Settings/Settings.module.css","Button/Button.tsx","Settings/Settings.tsx","Count/Scoreboard/Scoreboard.tsx","Count/Count.tsx","App.tsx","index.tsx"],"names":["module","exports","main","aqua","red","text","settingWrapper","inputWrapper","error","Button","props","react_default","a","createElement","disabled","isDisabled","onClick","callback","className","class","name","Settings","_useState","useState","maxValue","_useState2","Object","slicedToArray","localMaxValue","setLocalMaxValue","_useState3","startValue","_useState4","localStartValue","setLocalStartValue","useEffect","errorHandler","setError","setInputClass","value","s","htmlFor","type","id","onChange","e","currentTarget","isChanged","changeStatus","Button_Button","changeStartCountHandler","changeMaxCountHandler","Scoreboard","concat","count","maxScore","Count","setCurrentCount","startCount","currentCount","Scoreboard_Scoreboard","maxCount","App","StorageStartValue","localStorage","getItem","StorageMaxValue","setStartCount","setMaxCount","_useState5","_useState6","setIsChanged","_useState7","_useState8","src_Settings_Settings","newValue","setItem","src_Count_Count","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.30c17b7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Scoreboard_main__1FYbY\",\"aqua\":\"Scoreboard_aqua__2y6Pb\",\"red\":\"Scoreboard_red__W_ser\",\"text\":\"Scoreboard_text__1WTNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingWrapper\":\"Settings_settingWrapper__3mdgV\",\"inputWrapper\":\"Settings_inputWrapper__3Ouel\",\"error\":\"Settings_error__d8xFf\"};","import React from 'react';\r\n\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    class: string\r\n    isDisabled?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    const ButtonOnClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n\r\n        <button disabled={props.isDisabled} onClick={ButtonOnClickHandler} className={props.class}>\r\n            {props.name}\r\n        </button>\r\n\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Settings.module.css'\r\nimport {Button} from '../Button/Button';\r\n\r\ntype SettingPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    isChanged: boolean\r\n    changeStatus: () => void\r\n    changeStartCountHandler: (newValue: number) => void\r\n    changeMaxCountHandler: (newValue: number) => void\r\n    error: boolean\r\n    setError: (error:boolean) => void\r\n}\r\n\r\nconst Settings = (props: SettingPropsType) => {\r\n\r\n    const [localMaxValue, setLocalMaxValue] = useState(props.maxValue)\r\n    const [localStartValue, setLocalStartValue] = useState(props.startValue)\r\n\r\n    useEffect(() => {\r\n        errorHandler()\r\n    })\r\n\r\n\r\n    const errorHandler = () => {\r\n        if(localMaxValue <= localStartValue){\r\n            props.setError(true)\r\n        }\r\n        else if(localMaxValue < 0 || localStartValue<0){\r\n            props.setError(true)\r\n        }\r\n        else props.setError(false)\r\n    }\r\n\r\n\r\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalMaxValue(+e.currentTarget.value)\r\n        if (!props.isChanged) {\r\n            props.changeStatus()\r\n        }\r\n    }\r\n\r\n    const onChangeStartHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStartValue(+e.currentTarget.value)\r\n        if (!props.isChanged) {\r\n            props.changeStatus()\r\n        }\r\n    }\r\n\r\n    const setNewValues = () => {\r\n        props.changeStartCountHandler(localStartValue)\r\n        props.changeMaxCountHandler(localMaxValue)\r\n        if (props.isChanged) {\r\n            props.changeStatus()\r\n        }\r\n    }\r\n\r\n    const setInputClass = (value:number) => {\r\n        if(localMaxValue <= localStartValue){\r\n            return s.error\r\n        }\r\n        return value < 0 ? s.error : '';\r\n    }\r\n\r\n    return (\r\n        <div className={'inner'}>\r\n            <div className={s.settingWrapper}>\r\n                <div className={s.inputWrapper}>\r\n                    <label htmlFor={'max'}>Max Value:</label>\r\n                    <input type=\"number\" id={'max'} value={localMaxValue} onChange={onChangeMaxHandler}\r\n                           className={setInputClass(localMaxValue)}/>\r\n                </div>\r\n                <div className={s.inputWrapper}>\r\n                    <label htmlFor={'min'}>Start Value:</label>\r\n                    <input type=\"number\" id={'min'} value={localStartValue} onChange={onChangeStartHandler}\r\n                           className={setInputClass(localStartValue)}/>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={'buttons_wrapper'}>\r\n                <Button class={'button'} name={'Set'} callback={setNewValues}\r\n                        isDisabled={props.error || !props.isChanged}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Settings;","import React from 'react';\r\n\r\nimport s from './Scoreboard.module.css'\r\n\r\ntype ScoreboardPropsType = {\r\n    count: number\r\n    maxScore: number\r\n    isChanged: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Scoreboard = (props: ScoreboardPropsType) => {\r\n    const setScoreClassName = () => {\r\n        return (props.count === props.maxScore) ? s.red : s.aqua;\r\n    }\r\n\r\n    const showingText = () => {\r\n        if (props.error) {\r\n            return <p className={`${s.text} ${s.red}`}>Incorrect value!</p>\r\n        } else {\r\n            return props.isChanged\r\n                ? <p className={`${s.text} ${s.aqua}`}>Enter values and press 'set'</p>\r\n                : <p className={setScoreClassName()}>{props.count}</p>\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            {showingText()}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Scoreboard} from './Scoreboard/Scoreboard';\r\nimport {Button} from '../Button/Button';\r\n\r\ntype CountPropsType = {\r\n    startCount: number\r\n    maxCount: number\r\n    isChanged: boolean\r\n    error: boolean\r\n}\r\n\r\n\r\nconst Count = (props:CountPropsType) => {\r\n\r\n    useEffect( () => {\r\n        setCurrentCount(props.startCount)\r\n    }, [props.startCount])\r\n\r\n\r\n\r\n    const [currentCount, setCurrentCount] = useState<number>(props.startCount)\r\n\r\n    const buttonIncHandler = () => {\r\n        if (currentCount < props.maxCount) {\r\n            setCurrentCount(currentCount + 1)\r\n        }\r\n    }\r\n\r\n    const buttonResetHandler = () => {\r\n        setCurrentCount(props.startCount)\r\n    }\r\n\r\n    return (\r\n        <div className={'inner'}>\r\n            <Scoreboard count={currentCount} maxScore={props.maxCount} isChanged={props.isChanged} error={props.error}/>\r\n            <div className={'buttons_wrapper'}>\r\n                <Button isDisabled={props.isChanged || currentCount === props.maxCount} class={'button'} name={'Inc'} callback={buttonIncHandler}/>\r\n                <Button isDisabled={props.isChanged || currentCount === props.startCount} class={'button'} name={'Reset'}\r\n                        callback={buttonResetHandler}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Count;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Settings from './Settings/Settings';\r\nimport Count from './Count/Count';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    let StorageStartValue = localStorage.getItem('StartCount') || 0\r\n    let StorageMaxValue = localStorage.getItem('MaxCount') || 5\r\n\r\n    const [startCount, setStartCount] = useState<number>(+StorageStartValue)\r\n    const [maxCount, setMaxCount] = useState<number>(+StorageMaxValue)\r\n    const [isChanged, setIsChanged] = useState<boolean>(false)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n\r\n    const changeStartCountHandler = (newValue: number) => {\r\n        setStartCount(newValue)\r\n        localStorage.setItem('StartCount', `${newValue}`)\r\n    }\r\n    const changeMaxCountHandler = (newValue: number) => {\r\n        setMaxCount(newValue)\r\n        localStorage.setItem('MaxCount', `${newValue}`)\r\n    }\r\n\r\n    const changeStatus = () => {\r\n        setIsChanged(!isChanged)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Settings\r\n                startValue={startCount}\r\n                maxValue={maxCount}\r\n                changeMaxCountHandler={changeMaxCountHandler}\r\n                changeStartCountHandler={changeStartCountHandler}\r\n                isChanged={isChanged}\r\n                changeStatus={changeStatus}\r\n                error={error}\r\n                setError={setError}\r\n            />\r\n            <Count\r\n                error={error}\r\n                startCount={startCount}\r\n                maxCount={maxCount}\r\n                isChanged={isChanged}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App/>, document.getElementById('root')\r\n);\r\n// В типе UserPropsType у функции deleteUser в параметрах указан тип \"any\".\r\n// Какой тип было бы указать правильнее?\r\n"],"sourceRoot":""}